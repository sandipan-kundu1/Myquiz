{"version":3,"sources":["project/quiz-app/src/components/StartScreen.jsx","project/quiz-app/src/components/Answer.jsx","project/quiz-app/src/components/Question.jsx","project/quiz-app/src/components/Timer.jsx","project/quiz-app/src/components/Quiz.jsx","project/quiz-app/src/components/EndScreen.jsx","project/quiz-app/src/App.jsx","reportWebVitals.js","index.js"],"names":["StartScreen","_ref","onStart","settings","setSettings","useState","numQuestions","category","difficulty","timePerQuestion","React","createElement","className","htmlFor","id","value","onChange","e","target","onClick","handleStart","Answer","text","selected","correct","wrong","disabled","Question","question","onAnswer","number","total","selectedAnswer","setSelectedAnswer","answered","setAnswered","shuffledAnswers","setShuffledAnswers","useEffect","answers","incorrect_answers","correct_answer","sort","Math","random","map","answer","index","key","handleAnswerSelect","handleSubmit","setTimeout","Timer","duration","onTimeout","timeLeft","setTimeLeft","timerRef","useRef","current","clearInterval","setInterval","prevTime","progress","style","width","Quiz","onEnd","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","loading","setLoading","error","setError","timerKey","setTimerKey","async","response","axios","get","data","response_code","results","_error$response","_error$response$data","message","fetchQuestions","window","location","reload","parseInt","handleTimeout","length","prev","EndScreen","totalQuestions","onRestart","App","gameState","setGameState","setTotalQuestions","quizSettings","setQuizSettings","endQuiz","finalScore","restartQuiz","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"6LAGe,SAASA,EAAWC,GAAc,IAAbC,QAAEA,GAASD,EAC7C,MAAOE,EAAUC,GAAeC,mBAAS,CACvCC,aAAc,EACdC,SAAU,GACVC,WAAY,GACZC,gBAAiB,KAOnB,OACEC,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,MAAIC,UAAU,WAAU,YACxBF,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,SAAOE,QAAQ,iBAAgB,wBAC/BH,IAAAC,cAAA,UACEG,GAAG,gBACHC,MAAOZ,EAASG,aAChBU,SAAWC,GAAMb,EAAY,IAAID,EAAUG,aAAcW,EAAEC,OAAOH,SAElEL,IAAAC,cAAA,UAAQI,MAAM,KAAI,KAClBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,MACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,MACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,OAGrBL,IAAAC,cAAA,SAAOE,QAAQ,YAAW,oBAC1BH,IAAAC,cAAA,UACEG,GAAG,WACHC,MAAOZ,EAASI,SAChBS,SAAWC,GAAMb,EAAY,IAAID,EAAUI,SAAUU,EAAEC,OAAOH,SAE9DL,IAAAC,cAAA,UAAQI,MAAM,IAAG,gBACjBL,IAAAC,cAAA,UAAQI,MAAM,KAAI,qBAClBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,SACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,sBACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,aACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,eACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,aACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,UACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,aACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,WACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,aAGrBL,IAAAC,cAAA,SAAOE,QAAQ,cAAa,sBAC5BH,IAAAC,cAAA,UACEG,GAAG,aACHC,MAAOZ,EAASK,WAChBQ,SAAWC,GAAMb,EAAY,IAAID,EAAUK,WAAYS,EAAEC,OAAOH,SAEhEL,IAAAC,cAAA,UAAQI,MAAM,IAAG,kBACjBL,IAAAC,cAAA,UAAQI,MAAM,QAAO,QACrBL,IAAAC,cAAA,UAAQI,MAAM,UAAS,UACvBL,IAAAC,cAAA,UAAQI,MAAM,QAAO,SAGvBL,IAAAC,cAAA,SAAOE,QAAQ,QAAO,6BACtBH,IAAAC,cAAA,UACEG,GAAG,OACHC,MAAOZ,EAASM,gBAChBO,SAAWC,GAAMb,EAAY,IAAID,EAAUM,gBAAiBQ,EAAEC,OAAOH,SAErEL,IAAAC,cAAA,UAAQI,MAAM,MAAK,cACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,cACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,cACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,cACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,cACnBL,IAAAC,cAAA,UAAQI,MAAM,MAAK,gBAGvBL,IAAAC,cAAA,UAAQC,UAAU,YAAYO,QAjEdC,KAClBlB,EAAQC,KAgE8C,2BC3E3C,SAASkB,EAAMpB,GAAwD,IAAvDqB,KAAEA,EAAIC,SAAEA,EAAQC,QAAEA,EAAOC,MAAEA,EAAKN,QAAEA,EAAOO,SAAEA,GAAUzB,EAChF,MAAMW,YAAsBW,EAAW,WAAa,cAChDC,EAAU,UAAY,MAAMC,EAAQ,QAAU,cAC9CC,EAAW,UAAY,KAE3B,OACEhB,IAAAC,cAAA,OAAKC,UAAWA,EAAWO,QAASA,GAClCT,IAAAC,cAAA,QAAMC,UAAU,QAAQU,GACxBZ,IAAAC,cAAA,QAAMC,UAAU,YACdF,IAAAC,cAAA,KAAGC,UAAU,mBCPR,SAASe,EAAQ1B,GAAwC,IAAvC2B,SAAEA,EAAQC,SAAEA,EAAQC,OAAEA,EAAMC,MAAEA,GAAO9B,EACpE,MAAO+B,EAAgBC,GAAqB5B,mBAAS,OAC9C6B,EAAUC,GAAe9B,oBAAS,IAClC+B,EAAiBC,GAAsBhC,mBAAS,IAGvDiC,oBAAU,KACR,MAAMC,EAAU,IACXX,EAASY,kBACZZ,EAASa,gBACTC,KAAK,IAAMC,KAAKC,SAAW,IAE7BP,EAAmBE,GACnBN,EAAkB,MAClBE,GAAY,IACX,CAACP,IAiBJ,OACElB,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAAA,OAAKC,UAAU,UAAS,YACbF,IAAAC,cAAA,QAAMC,UAAU,WAAWkB,GACpCpB,IAAAC,cAAA,QAAMC,UAAU,SAAQ,IAAEmB,IAE5BrB,IAAAC,cAAA,OAAKC,UAAU,YAAYgB,EAASA,UACpClB,IAAAC,cAAA,OAAKC,UAAU,kBACZwB,EAAgBS,IAAI,CAACC,EAAQC,IAC5BrC,IAAAC,cAACU,EAAM,CACL2B,IAAKD,EACLzB,KAAMwB,EACNvB,SAAUS,IAAmBc,EAC7BtB,QAASU,GAAYY,IAAWlB,EAASa,eACzChB,MAAOS,GAAYF,IAAmBc,GAAUA,IAAWlB,EAASa,eACpEtB,QAASA,IA9BS2B,KACrBZ,GACHD,EAAkBa,IA4BGG,CAAmBH,GAClCpB,SAAUQ,MAIhBxB,IAAAC,cAAA,UACEC,UAAU,aACVc,UAAWM,GAAkBE,EAC7Bf,QAhCe+B,KACflB,IAAmBE,IACrBC,GAAY,GACZgB,WAAW,KACTtB,EAASG,IAAmBJ,EAASa,iBACpC,SA4BF,WCxDQ,SAASW,EAAKnD,GAA0B,IAAzBoD,SAAEA,EAAQC,UAAEA,GAAWrD,EACnD,MAAOsD,EAAUC,GAAenD,mBAASgD,GACnCI,EAAWC,iBAAO,MAExBpB,oBAAU,KACRkB,EAAYH,IACX,CAACA,IAEJf,oBAAU,KAEJmB,EAASE,SACXC,cAAcH,EAASE,SAIzBF,EAASE,QAAUE,YAAY,KAC7BL,EAAaM,GACPA,GAAY,GACdF,cAAcH,EAASE,SACvBL,IACO,GAEFQ,EAAW,IAEnB,KAGI,KACDL,EAASE,SACXC,cAAcH,EAASE,WAG1B,CAACN,EAAUC,IAEd,MAAMS,EAAYR,EAAWF,EAAY,IAEzC,OACE3C,IAAAC,cAAA,OAAKC,UAAU,SACbF,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,OACEC,UAAU,eACVoD,MAAO,CAAEC,SAAUF,QAErBrD,IAAAC,cAAA,QAAMC,UAAU,iBAAiB2C,KCvC1B,SAASW,EAAIjE,GAAsB,IAArBE,SAAEA,EAAQgE,MAAEA,GAAOlE,EAC9C,MAAOmE,EAAWC,GAAgBhE,mBAAS,KACpCiE,EAAiBC,GAAsBlE,mBAAS,IAChDmE,EAAOC,GAAYpE,mBAAS,IAC5BqE,EAASC,GAActE,oBAAS,IAChCuE,EAAOC,GAAYxE,mBAAS,OAC5ByE,EAAUC,GAAe1E,mBAAS,GAEzCiC,oBAAU,KACe0C,WACrB,IACEL,GAAW,GACXE,EAAS,MAGT,MAAMI,QAAiBC,IAAMC,0CACWhF,EAASG,yBAAyBH,EAASI,uBAAuBJ,EAASK,4BAK/E,IAAhCyE,EAASG,KAAKC,cAChBhB,EAAaY,EAASG,KAAKE,SAE3BT,EAAS,+CAEX,MAAOD,GAAO,IAAAW,EAAAC,EACdX,GACgB,QAAdU,EAAAX,EAAMK,gBAAQ,IAAAM,OAAA,EAAM,QAANC,EAAdD,EAAgBH,YAAI,IAAAI,OAAA,EAApBA,EAAsBC,UACtB,qEAEH,QACCd,GAAW,KAIfe,IACC,CAACvF,IAuBJ,OAAIuE,EAEAhE,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,OAAKC,UAAU,oBACfF,IAAAC,cAAA,SAAG,yBAMLiE,EAEAlE,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,SAAIiE,GACJlE,IAAAC,cAAA,UAAQC,UAAU,MAAMO,QAASA,IAAMwE,OAAOC,SAASC,UAAU,cASrEnF,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAACyC,EAAK,CACJJ,IAAK8B,EACLzB,SAAUyC,SAAS3F,EAASM,iBAC5B6C,UArCgByC,KAChBzB,EAAkB,EAAIF,EAAU4B,QAClCzB,EAAmBD,EAAkB,GACrCS,EAAYkB,GAAQA,EAAO,IAE3B9B,EAAMK,EAAOJ,EAAU4B,WAkCvBtF,IAAAC,cAACgB,EAAQ,CACPC,SAAUwC,EAAUE,GACpBzC,SApDgBL,IAChBA,GAASiD,EAASD,EAAQ,GAE1BF,EAAkB,EAAIF,EAAU4B,QAClCzB,EAAmBD,EAAkB,GACrCS,EAAYkB,GAAQA,EAAO,IAE3B9B,EAAMK,EAAOJ,EAAU4B,SA8CrBlE,OAAQwC,EAAkB,EAC1BvC,MAAOqC,EAAU4B,UCnGV,SAASE,EAASjG,GAAuC,IAAtCuE,MAAEA,EAAK2B,eAAEA,EAAcC,UAAEA,GAAWnG,EAClE,OACES,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,MAAIC,UAAU,WAAU,YACxBF,IAAAC,cAAA,OAAKC,UAAU,SACbF,IAAAC,cAAA,QAAMC,UAAU,cAAa,eAC7BF,IAAAC,cAAA,WACED,IAAAC,cAAA,QAAMC,UAAU,eAAe4D,GAC/B9D,IAAAC,cAAA,QAAMC,UAAU,eAAc,IAAEuF,KAGpCzF,IAAAC,cAAA,UAAQC,UAAU,cAAcO,QAASiF,GAAW,uBCL7C,SAASC,IACtB,MAAOC,EAAWC,GAAgBlG,mBAAS,UACpCmE,EAAOC,GAAYpE,mBAAS,IAC5B8F,EAAgBK,GAAqBnG,mBAAS,IAC9CoG,EAAcC,GAAmBrG,mBAAS,CAC/CC,aAAc,EACdC,SAAU,GACVC,WAAY,GACZC,gBAAiB,KAoBnB,OACEC,IAAAC,cAAA,OAAKC,UAAU,aACE,UAAd0F,GAAyB5F,IAAAC,cAACX,EAAW,CAACE,QAnBxBC,IACjBuG,EAAgBvG,GAChBoG,EAAa,WAkBI,SAAdD,GAAwB5F,IAAAC,cAACuD,EAAI,CAAC/D,SAAUsG,EAActC,MAf3CwC,CAACC,EAAY7E,KAC3B0C,EAASmC,GACTJ,EAAkBzE,GAClBwE,EAAa,UAaI,QAAdD,GACC5F,IAAAC,cAACuF,EAAS,CACR1B,MAAOA,EACP2B,eAAgBA,EAChBC,UAdYS,KAClBN,EAAa,SACb9B,EAAS,GACT+B,EAAkB,OCpBPM,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAhG,EAAA,GAAAiG,KAAAD,EAAAE,KAAA,UAAqBD,KAAKjH,IAAiD,IAAhDmH,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASvH,EACpEmH,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCIDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAOnH,IAAAC,cAAC0F,EAAG,OAKhBS","file":"static/js/main.b9636d45.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nexport default function StartScreen({ onStart }) {\r\n  const [settings, setSettings] = useState({\r\n    numQuestions: 5,\r\n    category: '',\r\n    difficulty: '',\r\n    timePerQuestion: 10\r\n  });\r\n\r\n  const handleStart = () => {\r\n    onStart(settings);\r\n  };\r\n\r\n  return (\r\n    <div className=\"start-screen\">\r\n      <h1 className=\"heading\">Quiz App</h1>\r\n      <div className=\"settings\">\r\n        <label htmlFor=\"num-questions\">Number of Questions:</label>\r\n        <select \r\n          id=\"num-questions\"\r\n          value={settings.numQuestions}\r\n          onChange={(e) => setSettings({...settings, numQuestions: e.target.value})}\r\n        >\r\n          <option value=\"5\">5</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"15\">15</option>\r\n          <option value=\"20\">20</option>\r\n        </select>\r\n\r\n        <label htmlFor=\"category\">Select Category:</label>\r\n        <select \r\n          id=\"category\"\r\n          value={settings.category}\r\n          onChange={(e) => setSettings({...settings, category: e.target.value})}\r\n        >\r\n          <option value=\"\">any category</option>\r\n          <option value=\"9\">general knowledge</option>\r\n          <option value=\"11\">films</option>\r\n          <option value=\"17\">science and nature</option>\r\n          <option value=\"18\">computers</option>\r\n          <option value=\"19\">mathematics</option>\r\n          <option value=\"20\">mythology</option>\r\n          <option value=\"21\">sports</option>\r\n          <option value=\"22\">geography</option>\r\n          <option value=\"23\">history</option>\r\n          <option value=\"24\">politics</option>\r\n        </select>\r\n\r\n        <label htmlFor=\"difficulty\">Select Difficulty:</label>\r\n        <select \r\n          id=\"difficulty\"\r\n          value={settings.difficulty}\r\n          onChange={(e) => setSettings({...settings, difficulty: e.target.value})}\r\n        >\r\n          <option value=\"\">any difficulty</option>\r\n          <option value=\"easy\">easy</option>\r\n          <option value=\"medium\">medium</option>\r\n          <option value=\"hard\">hard</option>\r\n        </select>\r\n\r\n        <label htmlFor=\"time\">Select Time Per Question:</label>\r\n        <select \r\n          id=\"time\"\r\n          value={settings.timePerQuestion}\r\n          onChange={(e) => setSettings({...settings, timePerQuestion: e.target.value})}\r\n        >\r\n          <option value=\"10\">10 seconds</option>\r\n          <option value=\"15\">15 seconds</option>\r\n          <option value=\"20\">20 seconds</option>\r\n          <option value=\"25\">25 seconds</option>\r\n          <option value=\"30\">30 seconds</option>\r\n          <option value=\"60\">60 seconds</option>\r\n        </select>\r\n      </div>\r\n      <button className=\"btn start\" onClick={handleStart}>Start Quiz</button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nexport default function Answer({ text, selected, correct, wrong, onClick, disabled }) {\r\n    const className = `answer ${selected ? 'selected' : ''} \r\n      ${correct ? 'correct' : ''} ${wrong ? 'wrong' : ''} \r\n      ${disabled ? 'checked' : ''}`;\r\n  \r\n    return (\r\n      <div className={className} onClick={onClick}>\r\n        <span className=\"text\">{text}</span>\r\n        <span className=\"checkbox\">\r\n          <i className=\"fas fa-check\"></i>\r\n        </span>\r\n      </div>\r\n    );\r\n  }","import React, { useState, useEffect } from 'react';\r\nimport Answer from './Answer';\r\n\r\nexport default function Question({ question, onAnswer, number, total }) {\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [answered, setAnswered] = useState(false);\r\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\r\n\r\n  // Shuffle answers when the question changes\r\n  useEffect(() => {\r\n    const answers = [\r\n      ...question.incorrect_answers,\r\n      question.correct_answer\r\n    ].sort(() => Math.random() - 0.5);\r\n\r\n    setShuffledAnswers(answers);\r\n    setSelectedAnswer(null);\r\n    setAnswered(false);\r\n  }, [question]);\r\n\r\n  const handleAnswerSelect = (answer) => {\r\n    if (!answered) {\r\n      setSelectedAnswer(answer);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (selectedAnswer && !answered) {\r\n      setAnswered(true);\r\n      setTimeout(() => {\r\n        onAnswer(selectedAnswer === question.correct_answer);\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-wrapper\">\r\n      <div className=\"number\">\r\n        Question <span className=\"current\">{number}</span>\r\n        <span className=\"total\">/{total}</span>\r\n      </div>\r\n      <div className=\"question\">{question.question}</div>\r\n      <div className=\"answer-wrapper\">\r\n        {shuffledAnswers.map((answer, index) => (\r\n          <Answer\r\n            key={index}\r\n            text={answer}\r\n            selected={selectedAnswer === answer}\r\n            correct={answered && answer === question.correct_answer}\r\n            wrong={answered && selectedAnswer === answer && answer !== question.correct_answer}\r\n            onClick={() => handleAnswerSelect(answer)}\r\n            disabled={answered}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button \r\n        className=\"btn submit\"\r\n        disabled={!selectedAnswer || answered}\r\n        onClick={handleSubmit}\r\n      >\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\nexport default function Timer({ duration, onTimeout }) {\r\n  const [timeLeft, setTimeLeft] = useState(duration);\r\n  const timerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    setTimeLeft(duration); // Reset time when duration changes\r\n  }, [duration]);\r\n\r\n  useEffect(() => {\r\n    // Clear any existing timer\r\n    if (timerRef.current) {\r\n      clearInterval(timerRef.current);\r\n    }\r\n\r\n    // Start new timer\r\n    timerRef.current = setInterval(() => {\r\n      setTimeLeft((prevTime) => {\r\n        if (prevTime <= 1) {\r\n          clearInterval(timerRef.current);\r\n          onTimeout();\r\n          return 0;\r\n        }\r\n        return prevTime - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    // Cleanup on unmount or when duration changes\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n      }\r\n    };\r\n  }, [duration, onTimeout]);\r\n\r\n  const progress = (timeLeft / duration) * 100;\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <div className=\"progress\">\r\n        <div \r\n          className=\"progress-bar\" \r\n          style={{ width: `${progress}%` }}\r\n        />\r\n        <span className=\"progress-text\">{timeLeft}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}","// src/components/Quiz.jsx\r\nimport React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';  // Import axios at the top\r\nimport Question from './Question';\r\nimport Timer from './Timer';\r\n\r\nexport default function Quiz({ settings, onEnd }) {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);  // Add error state\r\n  const [timerKey, setTimerKey] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Using axios.get instead of fetch\r\n        const response = await axios.get(\r\n          `https://opentdb.com/api.php?amount=${settings.numQuestions}&category=${settings.category}&difficulty=${settings.difficulty}&type=multiple`\r\n        );\r\n\r\n        // With axios, you don't need to call .json()\r\n        // Data is directly available in response.data\r\n        if (response.data.response_code === 0) {\r\n          setQuestions(response.data.results);\r\n        } else {\r\n          setError('Failed to load questions. Please try again.');\r\n        }\r\n      } catch (error) {\r\n        setError(\r\n          error.response?.data?.message || \r\n          'Failed to fetch questions. Please check your internet connection.'\r\n        );\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, [settings]);\r\n\r\n  const handleAnswer = (correct) => {\r\n    if (correct) setScore(score + 1);\r\n    \r\n    if (currentQuestion + 1 < questions.length) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n      setTimerKey(prev => prev + 1);\r\n    } else {\r\n      onEnd(score, questions.length);\r\n    }\r\n  };\r\n\r\n  const handleTimeout = () => {\r\n    if (currentQuestion + 1 < questions.length) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n      setTimerKey(prev => prev + 1);\r\n    } else {\r\n      onEnd(score, questions.length);\r\n    }\r\n  };\r\n\r\n  // Show loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"quiz-loading\">\r\n        <div className=\"loading-spinner\"></div>\r\n        <p>Loading questions...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"quiz-error\">\r\n        <p>{error}</p>\r\n        <button className=\"btn\" onClick={() => window.location.reload()}>\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show quiz if everything is loaded\r\n  return (\r\n    <div className=\"quiz\">\r\n      <Timer \r\n        key={timerKey}\r\n        duration={parseInt(settings.timePerQuestion)} \r\n        onTimeout={handleTimeout}\r\n      />\r\n      <Question \r\n        question={questions[currentQuestion]}\r\n        onAnswer={handleAnswer}\r\n        number={currentQuestion + 1}\r\n        total={questions.length}\r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nexport default function EndScreen({ score, totalQuestions, onRestart }) {\r\n    return (\r\n      <div className=\"end-screen\">\r\n        <h1 className=\"heading\">Quiz App</h1>\r\n        <div className=\"score\">\r\n          <span className=\"score-text\">Your score:</span>\r\n          <div>\r\n            <span className=\"final-score\">{score}</span>\r\n            <span className=\"total-score\">/{totalQuestions}</span>\r\n          </div>\r\n        </div>\r\n        <button className=\"btn restart\" onClick={onRestart}>\r\n          Restart Quiz\r\n        </button>\r\n      </div>\r\n    );\r\n  }","import React from 'react';\r\nimport { useState } from 'react';\r\nimport StartScreen from './components/StartScreen';\r\nimport Quiz from './components/Quiz';\r\nimport EndScreen from './components/EndScreen';\r\nimport './styles/index.css';\r\n\r\nexport default function App() {\r\n  const [gameState, setGameState] = useState('start'); // start, quiz, end\r\n  const [score, setScore] = useState(0);\r\n  const [totalQuestions, setTotalQuestions] = useState(0);\r\n  const [quizSettings, setQuizSettings] = useState({\r\n    numQuestions: 5,\r\n    category: '',\r\n    difficulty: '',\r\n    timePerQuestion: 30\r\n  });\r\n\r\n  const startQuiz = (settings) => {\r\n    setQuizSettings(settings);\r\n    setGameState('quiz');\r\n  };\r\n\r\n  const endQuiz = (finalScore, total) => {\r\n    setScore(finalScore);\r\n    setTotalQuestions(total);\r\n    setGameState('end');\r\n  };\r\n\r\n  const restartQuiz = () => {\r\n    setGameState('start');\r\n    setScore(0);\r\n    setTotalQuestions(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {gameState === 'start' && <StartScreen onStart={startQuiz} />}\r\n      {gameState === 'quiz' && <Quiz settings={quizSettings} onEnd={endQuiz} />}\r\n      {gameState === 'end' && (\r\n        <EndScreen \r\n          score={score} \r\n          totalQuestions={totalQuestions} \r\n          onRestart={restartQuiz} \r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n//import App from \"./App\"\n// import './index.css';\n// import App from './project/build react info site/App';\n// import Time from './basiclearning/printcurrentdatetime'\n//import App from \"./basiclearning/props/App2\"\n//import App from \"./project/airbnb/App\"\nimport App from \"./project/quiz-app/src/App\"\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}